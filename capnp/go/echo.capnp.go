// Code generated by capnpc-go. DO NOT EDIT.

package echo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type EchoStats capnp.Struct

// EchoStats_TypeID is the unique identifier for the type EchoStats.
const EchoStats_TypeID = 0xed52e5bef76b7c45

func NewEchoStats(s *capnp.Segment) (EchoStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EchoStats(st), err
}

func NewRootEchoStats(s *capnp.Segment) (EchoStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EchoStats(st), err
}

func ReadRootEchoStats(msg *capnp.Message) (EchoStats, error) {
	root, err := msg.Root()
	return EchoStats(root.Struct()), err
}

func (s EchoStats) String() string {
	str, _ := text.Marshal(0xed52e5bef76b7c45, capnp.Struct(s))
	return str
}

func (s EchoStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoStats) DecodeFromPtr(p capnp.Ptr) EchoStats {
	return EchoStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoStats) Latest() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoStats) HasLatest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoStats) LatestBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoStats) SetLatest(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EchoStats) Count() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s EchoStats) SetCount(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// EchoStats_List is a list of EchoStats.
type EchoStats_List = capnp.StructList[EchoStats]

// NewEchoStats creates a new list of EchoStats.
func NewEchoStats_List(s *capnp.Segment, sz int32) (EchoStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EchoStats](l), err
}

// EchoStats_Future is a wrapper for a EchoStats promised by a client call.
type EchoStats_Future struct{ *capnp.Future }

func (p EchoStats_Future) Struct() (EchoStats, error) {
	s, err := p.Future.Struct()
	return EchoStats(s), err
}

type EchoService capnp.Client

// EchoService_TypeID is the unique identifier for the type EchoService.
const EchoService_TypeID = 0xd52277af4a9defbf

func (c EchoService) Echo(ctx context.Context, params func(EchoService_echo_Params) error) (EchoService_echo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_echo_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_echo_Results_Future{Future: ans.Future()}, release
}
func (c EchoService) Latest(ctx context.Context, params func(EchoService_latest_Params) error) (EchoService_latest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "latest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_latest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_latest_Results_Future{Future: ans.Future()}, release
}
func (c EchoService) Stats(ctx context.Context, params func(EchoService_stats_Params) error) (EchoService_stats_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "stats",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_stats_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_stats_Results_Future{Future: ans.Future()}, release
}

func (c EchoService) AddRef() EchoService {
	return EchoService(capnp.Client(c).AddRef())
}

func (c EchoService) Release() {
	capnp.Client(c).Release()
}

func (c EchoService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EchoService) DecodeFromPtr(p capnp.Ptr) EchoService {
	return EchoService(capnp.Client{}.DecodeFromPtr(p))
}

func (c EchoService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A EchoService_Server is a EchoService with a local implementation.
type EchoService_Server interface {
	Echo(context.Context, EchoService_echo) error

	Latest(context.Context, EchoService_latest) error

	Stats(context.Context, EchoService_stats) error
}

// EchoService_NewServer creates a new Server from an implementation of EchoService_Server.
func EchoService_NewServer(s EchoService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EchoService_Methods(nil, s), s, c)
}

// EchoService_ServerToClient creates a new Client from an implementation of EchoService_Server.
// The caller is responsible for calling Release on the returned Client.
func EchoService_ServerToClient(s EchoService_Server) EchoService {
	return EchoService(capnp.NewClient(EchoService_NewServer(s)))
}

// EchoService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EchoService_Methods(methods []server.Method, s EchoService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Echo(ctx, EchoService_echo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "latest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Latest(ctx, EchoService_latest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "stats",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stats(ctx, EchoService_stats{call})
		},
	})

	return methods
}

// EchoService_echo holds the state for a server call to EchoService.echo.
// See server.Call for documentation.
type EchoService_echo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_echo) Args() EchoService_echo_Params {
	return EchoService_echo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_echo) AllocResults() (EchoService_echo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(r), err
}

// EchoService_latest holds the state for a server call to EchoService.latest.
// See server.Call for documentation.
type EchoService_latest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_latest) Args() EchoService_latest_Params {
	return EchoService_latest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_latest) AllocResults() (EchoService_latest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(r), err
}

// EchoService_stats holds the state for a server call to EchoService.stats.
// See server.Call for documentation.
type EchoService_stats struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_stats) Args() EchoService_stats_Params {
	return EchoService_stats_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_stats) AllocResults() (EchoService_stats_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(r), err
}

// EchoService_List is a list of EchoService.
type EchoService_List = capnp.CapList[EchoService]

// NewEchoService creates a new list of EchoService.
func NewEchoService_List(s *capnp.Segment, sz int32) (EchoService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EchoService](l), err
}

type EchoService_echo_Params capnp.Struct

// EchoService_echo_Params_TypeID is the unique identifier for the type EchoService_echo_Params.
const EchoService_echo_Params_TypeID = 0xe2bab90824c7835f

func NewEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func NewRootEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func ReadRootEchoService_echo_Params(msg *capnp.Message) (EchoService_echo_Params, error) {
	root, err := msg.Root()
	return EchoService_echo_Params(root.Struct()), err
}

func (s EchoService_echo_Params) String() string {
	str, _ := text.Marshal(0xe2bab90824c7835f, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Params) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Params {
	return EchoService_echo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_echo_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_echo_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_echo_Params_List is a list of EchoService_echo_Params.
type EchoService_echo_Params_List = capnp.StructList[EchoService_echo_Params]

// NewEchoService_echo_Params creates a new list of EchoService_echo_Params.
func NewEchoService_echo_Params_List(s *capnp.Segment, sz int32) (EchoService_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Params](l), err
}

// EchoService_echo_Params_Future is a wrapper for a EchoService_echo_Params promised by a client call.
type EchoService_echo_Params_Future struct{ *capnp.Future }

func (p EchoService_echo_Params_Future) Struct() (EchoService_echo_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_echo_Params(s), err
}

type EchoService_echo_Results capnp.Struct

// EchoService_echo_Results_TypeID is the unique identifier for the type EchoService_echo_Results.
const EchoService_echo_Results_TypeID = 0xb84fbc6148a9c28d

func NewEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func NewRootEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func ReadRootEchoService_echo_Results(msg *capnp.Message) (EchoService_echo_Results, error) {
	root, err := msg.Root()
	return EchoService_echo_Results(root.Struct()), err
}

func (s EchoService_echo_Results) String() string {
	str, _ := text.Marshal(0xb84fbc6148a9c28d, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Results) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Results {
	return EchoService_echo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Results) EchoText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_echo_Results) HasEchoText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Results) EchoTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_echo_Results) SetEchoText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_echo_Results_List is a list of EchoService_echo_Results.
type EchoService_echo_Results_List = capnp.StructList[EchoService_echo_Results]

// NewEchoService_echo_Results creates a new list of EchoService_echo_Results.
func NewEchoService_echo_Results_List(s *capnp.Segment, sz int32) (EchoService_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Results](l), err
}

// EchoService_echo_Results_Future is a wrapper for a EchoService_echo_Results promised by a client call.
type EchoService_echo_Results_Future struct{ *capnp.Future }

func (p EchoService_echo_Results_Future) Struct() (EchoService_echo_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_echo_Results(s), err
}

type EchoService_latest_Params capnp.Struct

// EchoService_latest_Params_TypeID is the unique identifier for the type EchoService_latest_Params.
const EchoService_latest_Params_TypeID = 0x8014ae8fc337c698

func NewEchoService_latest_Params(s *capnp.Segment) (EchoService_latest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_latest_Params(st), err
}

func NewRootEchoService_latest_Params(s *capnp.Segment) (EchoService_latest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_latest_Params(st), err
}

func ReadRootEchoService_latest_Params(msg *capnp.Message) (EchoService_latest_Params, error) {
	root, err := msg.Root()
	return EchoService_latest_Params(root.Struct()), err
}

func (s EchoService_latest_Params) String() string {
	str, _ := text.Marshal(0x8014ae8fc337c698, capnp.Struct(s))
	return str
}

func (s EchoService_latest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_latest_Params) DecodeFromPtr(p capnp.Ptr) EchoService_latest_Params {
	return EchoService_latest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_latest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_latest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_latest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_latest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EchoService_latest_Params_List is a list of EchoService_latest_Params.
type EchoService_latest_Params_List = capnp.StructList[EchoService_latest_Params]

// NewEchoService_latest_Params creates a new list of EchoService_latest_Params.
func NewEchoService_latest_Params_List(s *capnp.Segment, sz int32) (EchoService_latest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EchoService_latest_Params](l), err
}

// EchoService_latest_Params_Future is a wrapper for a EchoService_latest_Params promised by a client call.
type EchoService_latest_Params_Future struct{ *capnp.Future }

func (p EchoService_latest_Params_Future) Struct() (EchoService_latest_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_latest_Params(s), err
}

type EchoService_latest_Results capnp.Struct

// EchoService_latest_Results_TypeID is the unique identifier for the type EchoService_latest_Results.
const EchoService_latest_Results_TypeID = 0xa808aa9542253d6d

func NewEchoService_latest_Results(s *capnp.Segment) (EchoService_latest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(st), err
}

func NewRootEchoService_latest_Results(s *capnp.Segment) (EchoService_latest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(st), err
}

func ReadRootEchoService_latest_Results(msg *capnp.Message) (EchoService_latest_Results, error) {
	root, err := msg.Root()
	return EchoService_latest_Results(root.Struct()), err
}

func (s EchoService_latest_Results) String() string {
	str, _ := text.Marshal(0xa808aa9542253d6d, capnp.Struct(s))
	return str
}

func (s EchoService_latest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_latest_Results) DecodeFromPtr(p capnp.Ptr) EchoService_latest_Results {
	return EchoService_latest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_latest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_latest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_latest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_latest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_latest_Results) EchoText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_latest_Results) HasEchoText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_latest_Results) EchoTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_latest_Results) SetEchoText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_latest_Results_List is a list of EchoService_latest_Results.
type EchoService_latest_Results_List = capnp.StructList[EchoService_latest_Results]

// NewEchoService_latest_Results creates a new list of EchoService_latest_Results.
func NewEchoService_latest_Results_List(s *capnp.Segment, sz int32) (EchoService_latest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_latest_Results](l), err
}

// EchoService_latest_Results_Future is a wrapper for a EchoService_latest_Results promised by a client call.
type EchoService_latest_Results_Future struct{ *capnp.Future }

func (p EchoService_latest_Results_Future) Struct() (EchoService_latest_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_latest_Results(s), err
}

type EchoService_stats_Params capnp.Struct

// EchoService_stats_Params_TypeID is the unique identifier for the type EchoService_stats_Params.
const EchoService_stats_Params_TypeID = 0xcf6bbf9983d88b8e

func NewEchoService_stats_Params(s *capnp.Segment) (EchoService_stats_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_stats_Params(st), err
}

func NewRootEchoService_stats_Params(s *capnp.Segment) (EchoService_stats_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_stats_Params(st), err
}

func ReadRootEchoService_stats_Params(msg *capnp.Message) (EchoService_stats_Params, error) {
	root, err := msg.Root()
	return EchoService_stats_Params(root.Struct()), err
}

func (s EchoService_stats_Params) String() string {
	str, _ := text.Marshal(0xcf6bbf9983d88b8e, capnp.Struct(s))
	return str
}

func (s EchoService_stats_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_stats_Params) DecodeFromPtr(p capnp.Ptr) EchoService_stats_Params {
	return EchoService_stats_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_stats_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_stats_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_stats_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_stats_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EchoService_stats_Params_List is a list of EchoService_stats_Params.
type EchoService_stats_Params_List = capnp.StructList[EchoService_stats_Params]

// NewEchoService_stats_Params creates a new list of EchoService_stats_Params.
func NewEchoService_stats_Params_List(s *capnp.Segment, sz int32) (EchoService_stats_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EchoService_stats_Params](l), err
}

// EchoService_stats_Params_Future is a wrapper for a EchoService_stats_Params promised by a client call.
type EchoService_stats_Params_Future struct{ *capnp.Future }

func (p EchoService_stats_Params_Future) Struct() (EchoService_stats_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_stats_Params(s), err
}

type EchoService_stats_Results capnp.Struct

// EchoService_stats_Results_TypeID is the unique identifier for the type EchoService_stats_Results.
const EchoService_stats_Results_TypeID = 0xda5279fc7be4434e

func NewEchoService_stats_Results(s *capnp.Segment) (EchoService_stats_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(st), err
}

func NewRootEchoService_stats_Results(s *capnp.Segment) (EchoService_stats_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(st), err
}

func ReadRootEchoService_stats_Results(msg *capnp.Message) (EchoService_stats_Results, error) {
	root, err := msg.Root()
	return EchoService_stats_Results(root.Struct()), err
}

func (s EchoService_stats_Results) String() string {
	str, _ := text.Marshal(0xda5279fc7be4434e, capnp.Struct(s))
	return str
}

func (s EchoService_stats_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_stats_Results) DecodeFromPtr(p capnp.Ptr) EchoService_stats_Results {
	return EchoService_stats_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_stats_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_stats_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_stats_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_stats_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_stats_Results) Stats() (EchoStats, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EchoStats(p.Struct()), err
}

func (s EchoService_stats_Results) HasStats() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_stats_Results) SetStats(v EchoStats) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStats sets the stats field to a newly
// allocated EchoStats struct, preferring placement in s's segment.
func (s EchoService_stats_Results) NewStats() (EchoStats, error) {
	ss, err := NewEchoStats(capnp.Struct(s).Segment())
	if err != nil {
		return EchoStats{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EchoService_stats_Results_List is a list of EchoService_stats_Results.
type EchoService_stats_Results_List = capnp.StructList[EchoService_stats_Results]

// NewEchoService_stats_Results creates a new list of EchoService_stats_Results.
func NewEchoService_stats_Results_List(s *capnp.Segment, sz int32) (EchoService_stats_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_stats_Results](l), err
}

// EchoService_stats_Results_Future is a wrapper for a EchoService_stats_Results promised by a client call.
type EchoService_stats_Results_Future struct{ *capnp.Future }

func (p EchoService_stats_Results_Future) Struct() (EchoService_stats_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_stats_Results(s), err
}

func (p EchoService_stats_Results_Future) Stats() EchoStats_Future {
	return EchoStats_Future{Future: p.Future.Field(0, nil)}
}

const schema_cd6ed2180540008c = "x\xda\xac\x92Ah\xd3P\x18\xc7\xbf\xff\x97\xd4\x04\xd6" +
	"\xd2\x85t8\xbc\x94\x8d\x0e]\xa1\xa3\xab\x82\xac -" +
	"JAv\xd0\xbe\xe8]B\x08L\xb6\xb6\xa3I\xddD" +
	"\x0f\xc2\xf0\xa4\xd3\x93\xa0\x87\xddu\xa0\x9e\x04\x1d\xe2@" +
	"\xc1\x9dD\x10\x06*xP\xf4\xe0A<\x8a\xa0D^" +
	"j\xb2\xa8H/\xbb=\xde\xf7{\xff\xff\xf7\xfe\xdfW" +
	"\x9eF]\x9d\xce\xecW\x89E9\xb5'\xb8\xf9\xfc\xf0" +
	"\xb3\xeb\xf7r\x97\xc8\xd8\x0b\"U#:\xf8\x1dE\x90" +
	"\x1a\xb4\x8eL\x1c\xbd\xb1\xae\xdf\xeeWR\x90\xa5\xf7\xa8" +
	"\x80`~F\x8d\x10\xac>\xbds\xdc~|\xf2a\x12" +
	"\xc8\xf0\xb8\x04FX\x02\xd7\xae\xbc^\xb9\xb59\xff2" +
	"\xa1=#\xebj\xb0\xf9um\xf6\xfe\xd2\xf86\x19C" +
	"\xca\xcf\xab\xf5\xd4\xe8\xab\xf6\x0b\x829\xc6\x1b\xe6$k" +
	"D\xe6\x04o\x99k\xf2\x14\x9c8\xf6\xf1\xc2\x8f\xf3\xd6" +
	"\xdb\xa4\xcbe.J\x97\xd5\xd0\xe5\xcc\xcaVA\x7f\xb4" +
	"\xf1!\x09\xdc\xe5}\x12x\x10\x02\x8d\x8b\xf3\xdf\x9e|" +
	"\xb2\xbe\x90\x18\x02\"\xb7\x903\xb7y\xdd|\x17\x1a\xbe" +
	"\xe1%*\x05\xae3\xd7\x99r\xecE\xa5\xbdXm8" +
	"s\x9dSn\xf7\xdcY\xc7\x9dZ\xb0}\xd7\xf3\x0bM" +
	";\xdb\xb5[\xde \xccr\xf3^o\xc1\xf7\x84\xaa\xa8" +
	"D*\x88\x8c\xcc,\x91H+\x10\xa3\x8c\xf0\xf9iw" +
	"\xd9'\"\xa4\x89\x91&\xfcWR\xde\x17,\xd7\xebi" +
	"\xbb$\xe8\xf9\xb6\xef\x15\x9avWK\xfe\x04\x11U\xeb" +
	"cM@\xa4\x95\x14Q\x1c/\xa2q\x1b\xa2Hl4" +
	"4 ^\x1eD\xbbb\xccT\x89\x8d\x92\x06\x8e\x87\x8f" +
	"h\x80\xc6X\x85\xd8\x18\xd1\xb2\xd2\xb3\x8eZ?\xac:" +
	"\xf2aGu41\xa8i\xcb\xf5\xb2\x7f\xe7Z!\x12" +
	"\xba\x02\x91\xe3\xdfB\x18\xde\x198\x01\xc3\x83\xb2m\xda" +
	"][i\xfd\xa1Y\xdc\xd1\xcc\xfa\xee\xb2\xffO\xa6q" +
	"ZY\xe9(\xb3\xd2\xe3\xd7\x93U\"QP \xca\x0c" +
	" \x07yW\x92]\x1eP \x0eq\xf4\xefH3\xef" +
	"tzm\x1f:1t\xc2\xaf\x00\x00\x00\xff\xff;u" +
	"\xf9\xa5"

func init() {
	schemas.Register(schema_cd6ed2180540008c,
		0x8014ae8fc337c698,
		0xa808aa9542253d6d,
		0xb84fbc6148a9c28d,
		0xcf6bbf9983d88b8e,
		0xd52277af4a9defbf,
		0xda5279fc7be4434e,
		0xe2bab90824c7835f,
		0xed52e5bef76b7c45)
}
