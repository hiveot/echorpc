// Code generated by capnpc-go. DO NOT EDIT.

package echo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type EchoServiceCap capnp.Client

// EchoServiceCap_TypeID is the unique identifier for the type EchoServiceCap.
const EchoServiceCap_TypeID = 0xb90cc72543e28a37

func (c EchoServiceCap) Echo(ctx context.Context, params func(EchoServiceCap_echo_Params) error) (EchoServiceCap_echo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "echo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoServiceCap_echo_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoServiceCap_echo_Results_Future{Future: ans.Future()}, release
}
func (c EchoServiceCap) Upper(ctx context.Context, params func(EchoServiceCap_upper_Params) error) (EchoServiceCap_upper_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "upper",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoServiceCap_upper_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoServiceCap_upper_Results_Future{Future: ans.Future()}, release
}
func (c EchoServiceCap) Reverse(ctx context.Context, params func(EchoServiceCap_reverse_Params) error) (EchoServiceCap_reverse_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "reverse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoServiceCap_reverse_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoServiceCap_reverse_Results_Future{Future: ans.Future()}, release
}

func (c EchoServiceCap) AddRef() EchoServiceCap {
	return EchoServiceCap(capnp.Client(c).AddRef())
}

func (c EchoServiceCap) Release() {
	capnp.Client(c).Release()
}

func (c EchoServiceCap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EchoServiceCap) DecodeFromPtr(p capnp.Ptr) EchoServiceCap {
	return EchoServiceCap(capnp.Client{}.DecodeFromPtr(p))
}

func (c EchoServiceCap) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A EchoServiceCap_Server is a EchoServiceCap with a local implementation.
type EchoServiceCap_Server interface {
	Echo(context.Context, EchoServiceCap_echo) error

	Upper(context.Context, EchoServiceCap_upper) error

	Reverse(context.Context, EchoServiceCap_reverse) error
}

// EchoServiceCap_NewServer creates a new Server from an implementation of EchoServiceCap_Server.
func EchoServiceCap_NewServer(s EchoServiceCap_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EchoServiceCap_Methods(nil, s), s, c)
}

// EchoServiceCap_ServerToClient creates a new Client from an implementation of EchoServiceCap_Server.
// The caller is responsible for calling Release on the returned Client.
func EchoServiceCap_ServerToClient(s EchoServiceCap_Server) EchoServiceCap {
	return EchoServiceCap(capnp.NewClient(EchoServiceCap_NewServer(s)))
}

// EchoServiceCap_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EchoServiceCap_Methods(methods []server.Method, s EchoServiceCap_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Echo(ctx, EchoServiceCap_echo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "upper",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Upper(ctx, EchoServiceCap_upper{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb90cc72543e28a37,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoServiceCap",
			MethodName:    "reverse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reverse(ctx, EchoServiceCap_reverse{call})
		},
	})

	return methods
}

// EchoServiceCap_echo holds the state for a server call to EchoServiceCap.echo.
// See server.Call for documentation.
type EchoServiceCap_echo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoServiceCap_echo) Args() EchoServiceCap_echo_Params {
	return EchoServiceCap_echo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoServiceCap_echo) AllocResults() (EchoServiceCap_echo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_echo_Results(r), err
}

// EchoServiceCap_upper holds the state for a server call to EchoServiceCap.upper.
// See server.Call for documentation.
type EchoServiceCap_upper struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoServiceCap_upper) Args() EchoServiceCap_upper_Params {
	return EchoServiceCap_upper_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoServiceCap_upper) AllocResults() (EchoServiceCap_upper_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_upper_Results(r), err
}

// EchoServiceCap_reverse holds the state for a server call to EchoServiceCap.reverse.
// See server.Call for documentation.
type EchoServiceCap_reverse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoServiceCap_reverse) Args() EchoServiceCap_reverse_Params {
	return EchoServiceCap_reverse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoServiceCap_reverse) AllocResults() (EchoServiceCap_reverse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_reverse_Results(r), err
}

// EchoServiceCap_List is a list of EchoServiceCap.
type EchoServiceCap_List = capnp.CapList[EchoServiceCap]

// NewEchoServiceCap creates a new list of EchoServiceCap.
func NewEchoServiceCap_List(s *capnp.Segment, sz int32) (EchoServiceCap_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EchoServiceCap](l), err
}

type EchoServiceCap_echo_Params capnp.Struct

// EchoServiceCap_echo_Params_TypeID is the unique identifier for the type EchoServiceCap_echo_Params.
const EchoServiceCap_echo_Params_TypeID = 0x99a36f1c77433dfb

func NewEchoServiceCap_echo_Params(s *capnp.Segment) (EchoServiceCap_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_echo_Params(st), err
}

func NewRootEchoServiceCap_echo_Params(s *capnp.Segment) (EchoServiceCap_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_echo_Params(st), err
}

func ReadRootEchoServiceCap_echo_Params(msg *capnp.Message) (EchoServiceCap_echo_Params, error) {
	root, err := msg.Root()
	return EchoServiceCap_echo_Params(root.Struct()), err
}

func (s EchoServiceCap_echo_Params) String() string {
	str, _ := text.Marshal(0x99a36f1c77433dfb, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_echo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_echo_Params) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_echo_Params {
	return EchoServiceCap_echo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_echo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_echo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_echo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_echo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_echo_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_echo_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_echo_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_echo_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_echo_Params_List is a list of EchoServiceCap_echo_Params.
type EchoServiceCap_echo_Params_List = capnp.StructList[EchoServiceCap_echo_Params]

// NewEchoServiceCap_echo_Params creates a new list of EchoServiceCap_echo_Params.
func NewEchoServiceCap_echo_Params_List(s *capnp.Segment, sz int32) (EchoServiceCap_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_echo_Params](l), err
}

// EchoServiceCap_echo_Params_Future is a wrapper for a EchoServiceCap_echo_Params promised by a client call.
type EchoServiceCap_echo_Params_Future struct{ *capnp.Future }

func (p EchoServiceCap_echo_Params_Future) Struct() (EchoServiceCap_echo_Params, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_echo_Params(s), err
}

type EchoServiceCap_echo_Results capnp.Struct

// EchoServiceCap_echo_Results_TypeID is the unique identifier for the type EchoServiceCap_echo_Results.
const EchoServiceCap_echo_Results_TypeID = 0xab6f8990059315ae

func NewEchoServiceCap_echo_Results(s *capnp.Segment) (EchoServiceCap_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_echo_Results(st), err
}

func NewRootEchoServiceCap_echo_Results(s *capnp.Segment) (EchoServiceCap_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_echo_Results(st), err
}

func ReadRootEchoServiceCap_echo_Results(msg *capnp.Message) (EchoServiceCap_echo_Results, error) {
	root, err := msg.Root()
	return EchoServiceCap_echo_Results(root.Struct()), err
}

func (s EchoServiceCap_echo_Results) String() string {
	str, _ := text.Marshal(0xab6f8990059315ae, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_echo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_echo_Results) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_echo_Results {
	return EchoServiceCap_echo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_echo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_echo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_echo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_echo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_echo_Results) EchoText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_echo_Results) HasEchoText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_echo_Results) EchoTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_echo_Results) SetEchoText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_echo_Results_List is a list of EchoServiceCap_echo_Results.
type EchoServiceCap_echo_Results_List = capnp.StructList[EchoServiceCap_echo_Results]

// NewEchoServiceCap_echo_Results creates a new list of EchoServiceCap_echo_Results.
func NewEchoServiceCap_echo_Results_List(s *capnp.Segment, sz int32) (EchoServiceCap_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_echo_Results](l), err
}

// EchoServiceCap_echo_Results_Future is a wrapper for a EchoServiceCap_echo_Results promised by a client call.
type EchoServiceCap_echo_Results_Future struct{ *capnp.Future }

func (p EchoServiceCap_echo_Results_Future) Struct() (EchoServiceCap_echo_Results, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_echo_Results(s), err
}

type EchoServiceCap_upper_Params capnp.Struct

// EchoServiceCap_upper_Params_TypeID is the unique identifier for the type EchoServiceCap_upper_Params.
const EchoServiceCap_upper_Params_TypeID = 0xfad237009c515693

func NewEchoServiceCap_upper_Params(s *capnp.Segment) (EchoServiceCap_upper_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_upper_Params(st), err
}

func NewRootEchoServiceCap_upper_Params(s *capnp.Segment) (EchoServiceCap_upper_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_upper_Params(st), err
}

func ReadRootEchoServiceCap_upper_Params(msg *capnp.Message) (EchoServiceCap_upper_Params, error) {
	root, err := msg.Root()
	return EchoServiceCap_upper_Params(root.Struct()), err
}

func (s EchoServiceCap_upper_Params) String() string {
	str, _ := text.Marshal(0xfad237009c515693, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_upper_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_upper_Params) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_upper_Params {
	return EchoServiceCap_upper_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_upper_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_upper_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_upper_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_upper_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_upper_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_upper_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_upper_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_upper_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_upper_Params_List is a list of EchoServiceCap_upper_Params.
type EchoServiceCap_upper_Params_List = capnp.StructList[EchoServiceCap_upper_Params]

// NewEchoServiceCap_upper_Params creates a new list of EchoServiceCap_upper_Params.
func NewEchoServiceCap_upper_Params_List(s *capnp.Segment, sz int32) (EchoServiceCap_upper_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_upper_Params](l), err
}

// EchoServiceCap_upper_Params_Future is a wrapper for a EchoServiceCap_upper_Params promised by a client call.
type EchoServiceCap_upper_Params_Future struct{ *capnp.Future }

func (p EchoServiceCap_upper_Params_Future) Struct() (EchoServiceCap_upper_Params, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_upper_Params(s), err
}

type EchoServiceCap_upper_Results capnp.Struct

// EchoServiceCap_upper_Results_TypeID is the unique identifier for the type EchoServiceCap_upper_Results.
const EchoServiceCap_upper_Results_TypeID = 0x937b812a608f755d

func NewEchoServiceCap_upper_Results(s *capnp.Segment) (EchoServiceCap_upper_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_upper_Results(st), err
}

func NewRootEchoServiceCap_upper_Results(s *capnp.Segment) (EchoServiceCap_upper_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_upper_Results(st), err
}

func ReadRootEchoServiceCap_upper_Results(msg *capnp.Message) (EchoServiceCap_upper_Results, error) {
	root, err := msg.Root()
	return EchoServiceCap_upper_Results(root.Struct()), err
}

func (s EchoServiceCap_upper_Results) String() string {
	str, _ := text.Marshal(0x937b812a608f755d, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_upper_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_upper_Results) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_upper_Results {
	return EchoServiceCap_upper_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_upper_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_upper_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_upper_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_upper_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_upper_Results) UpperText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_upper_Results) HasUpperText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_upper_Results) UpperTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_upper_Results) SetUpperText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_upper_Results_List is a list of EchoServiceCap_upper_Results.
type EchoServiceCap_upper_Results_List = capnp.StructList[EchoServiceCap_upper_Results]

// NewEchoServiceCap_upper_Results creates a new list of EchoServiceCap_upper_Results.
func NewEchoServiceCap_upper_Results_List(s *capnp.Segment, sz int32) (EchoServiceCap_upper_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_upper_Results](l), err
}

// EchoServiceCap_upper_Results_Future is a wrapper for a EchoServiceCap_upper_Results promised by a client call.
type EchoServiceCap_upper_Results_Future struct{ *capnp.Future }

func (p EchoServiceCap_upper_Results_Future) Struct() (EchoServiceCap_upper_Results, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_upper_Results(s), err
}

type EchoServiceCap_reverse_Params capnp.Struct

// EchoServiceCap_reverse_Params_TypeID is the unique identifier for the type EchoServiceCap_reverse_Params.
const EchoServiceCap_reverse_Params_TypeID = 0xebf815997dbc610e

func NewEchoServiceCap_reverse_Params(s *capnp.Segment) (EchoServiceCap_reverse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_reverse_Params(st), err
}

func NewRootEchoServiceCap_reverse_Params(s *capnp.Segment) (EchoServiceCap_reverse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_reverse_Params(st), err
}

func ReadRootEchoServiceCap_reverse_Params(msg *capnp.Message) (EchoServiceCap_reverse_Params, error) {
	root, err := msg.Root()
	return EchoServiceCap_reverse_Params(root.Struct()), err
}

func (s EchoServiceCap_reverse_Params) String() string {
	str, _ := text.Marshal(0xebf815997dbc610e, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_reverse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_reverse_Params) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_reverse_Params {
	return EchoServiceCap_reverse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_reverse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_reverse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_reverse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_reverse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_reverse_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_reverse_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_reverse_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_reverse_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_reverse_Params_List is a list of EchoServiceCap_reverse_Params.
type EchoServiceCap_reverse_Params_List = capnp.StructList[EchoServiceCap_reverse_Params]

// NewEchoServiceCap_reverse_Params creates a new list of EchoServiceCap_reverse_Params.
func NewEchoServiceCap_reverse_Params_List(s *capnp.Segment, sz int32) (EchoServiceCap_reverse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_reverse_Params](l), err
}

// EchoServiceCap_reverse_Params_Future is a wrapper for a EchoServiceCap_reverse_Params promised by a client call.
type EchoServiceCap_reverse_Params_Future struct{ *capnp.Future }

func (p EchoServiceCap_reverse_Params_Future) Struct() (EchoServiceCap_reverse_Params, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_reverse_Params(s), err
}

type EchoServiceCap_reverse_Results capnp.Struct

// EchoServiceCap_reverse_Results_TypeID is the unique identifier for the type EchoServiceCap_reverse_Results.
const EchoServiceCap_reverse_Results_TypeID = 0xbc5448df6bee5d37

func NewEchoServiceCap_reverse_Results(s *capnp.Segment) (EchoServiceCap_reverse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_reverse_Results(st), err
}

func NewRootEchoServiceCap_reverse_Results(s *capnp.Segment) (EchoServiceCap_reverse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoServiceCap_reverse_Results(st), err
}

func ReadRootEchoServiceCap_reverse_Results(msg *capnp.Message) (EchoServiceCap_reverse_Results, error) {
	root, err := msg.Root()
	return EchoServiceCap_reverse_Results(root.Struct()), err
}

func (s EchoServiceCap_reverse_Results) String() string {
	str, _ := text.Marshal(0xbc5448df6bee5d37, capnp.Struct(s))
	return str
}

func (s EchoServiceCap_reverse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoServiceCap_reverse_Results) DecodeFromPtr(p capnp.Ptr) EchoServiceCap_reverse_Results {
	return EchoServiceCap_reverse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoServiceCap_reverse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoServiceCap_reverse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoServiceCap_reverse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoServiceCap_reverse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoServiceCap_reverse_Results) ReverseText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoServiceCap_reverse_Results) HasReverseText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoServiceCap_reverse_Results) ReverseTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoServiceCap_reverse_Results) SetReverseText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoServiceCap_reverse_Results_List is a list of EchoServiceCap_reverse_Results.
type EchoServiceCap_reverse_Results_List = capnp.StructList[EchoServiceCap_reverse_Results]

// NewEchoServiceCap_reverse_Results creates a new list of EchoServiceCap_reverse_Results.
func NewEchoServiceCap_reverse_Results_List(s *capnp.Segment, sz int32) (EchoServiceCap_reverse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoServiceCap_reverse_Results](l), err
}

// EchoServiceCap_reverse_Results_Future is a wrapper for a EchoServiceCap_reverse_Results promised by a client call.
type EchoServiceCap_reverse_Results_Future struct{ *capnp.Future }

func (p EchoServiceCap_reverse_Results_Future) Struct() (EchoServiceCap_reverse_Results, error) {
	s, err := p.Future.Struct()
	return EchoServiceCap_reverse_Results(s), err
}

const schema_cd6ed2180540008c = "x\xda\xa4\x92Oh\x13A\x14\x87\x7f\xef\xcd\xae+\xb8" +
	"\xb5\x0ck\xa0\x8aP\x0a\x151\xd8\xa2\xf5\x10,H\x96" +
	"\x86\x82\x14\x84\x9d\x18\x05\x0f\x05\xd70PQ\x9be\x93" +
	"\xd4\x80\x88xT\x04\x85\x9c\x0a\xde<\x0a\xde<\x08\xbd" +
	"x\xea)\x08\x01\xcf\x82\xe0IP\xbc\xf9\x07Y\x99m" +
	"\xba\x8cVJ\xa1\xb7\x85\xf9\xf8\xf6\xcd\xfb\xe6\xccI\x0a" +
	"\x9d\xb3c\xef\x04X\x9dv\x0fd\xcb\xdd\xa7\xd7\xcb\x0f" +
	"\xef\xf5!\x8f\x11\xe0\x92\x07\x9c\x1b\xd0\x02\x81\x82\xf7T" +
	"\x05e\xbf.\xd4\xee\x1eo\xbdX\xb7\x81\x1f4g\x00" +
	"b\x03\xbc*\xf5\xddg\x8fZ/m`\x8a\xe7\x0dp" +
	"*\x07*\x8f?\xd6Nl\xfao \x0f\x89\xdfOB" +
	"wb\xb8:\x00\x05\x97x\x18\\c\x0f\x08\xae\xf0f" +
	"00_Ye\xf9\xcb\xad\x0f\x17\x1b\x1b\xb6\xeb5\xd7" +
	"\x8d\xebm\xee:\x1co\xdc_/}\xffl\x03\x9fx" +
	"\xc9\x00\xdf\x0c\xf0\xb5\x7fU=\xaf\x0c\x7fZ\xc7R\xe4" +
	"\xb3\x1c\x15U\xccd\xba\xb9\xd2\x9am\xc6\x89\xb3\x9a\xcc" +
	"/6WZ\x97u\xbav\xb3\xa9kq2\xdbM\x12" +
	"\x9dN\xd7u\xbb{\xbb\xd3\x86r\x84\x038\x04\xc8\xb1" +
	":\xa0|Aj\x82)\xcb\xa9\x86\xee\x81:\xe4\x83\xc9" +
	"\x07\x15R\xb1Sj\x8e\xa6\xa3\xc98\x8d\xef\xb4me" +
	"\x19P\x07\x05\xa9#L\xe3\x1d\xdd\xdb\xbb\xab^\xdd\x1a" +
	"\xd0\x96-Y\xf3\x19\xa8\xa1{\x1d\x00;\x9c\xfc\xaf\x93" +
	"\x92\x88H\xf9\xc2\x05\x8a\xce\xb4\xddS\xaa2X.z" +
	"T,\xd5z,\xe7\xe7\xc0r\xc6#.\x8a\xd0v;" +
	"9\xb5\x00\x96%o\xdc\xfc6\xa4\xc9|c!=H" +
	"\xf5\x9aN\xdb:\xa4\x88h\xb7\x0e#nT\x82\xfe\xba" +
	"\xe9\x0d\xeb\xa6#\xae\x01\xef\x7f\xfb\xdbE\x1c\xe55\x80" +
	"\xfd\xf6\xd8z0\xd5h\xcfq\xff\x04\x00\x00\xff\xff\xd4" +
	"\x97\xe6O"

func init() {
	schemas.Register(schema_cd6ed2180540008c,
		0x937b812a608f755d,
		0x99a36f1c77433dfb,
		0xab6f8990059315ae,
		0xb90cc72543e28a37,
		0xbc5448df6bee5d37,
		0xebf815997dbc610e,
		0xfad237009c515693)
}
