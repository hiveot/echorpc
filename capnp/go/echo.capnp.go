// Code generated by capnpc-go. DO NOT EDIT.

package echo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type EchoStats capnp.Struct

// EchoStats_TypeID is the unique identifier for the type EchoStats.
const EchoStats_TypeID = 0xed52e5bef76b7c45

func NewEchoStats(s *capnp.Segment) (EchoStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EchoStats(st), err
}

func NewRootEchoStats(s *capnp.Segment) (EchoStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EchoStats(st), err
}

func ReadRootEchoStats(msg *capnp.Message) (EchoStats, error) {
	root, err := msg.Root()
	return EchoStats(root.Struct()), err
}

func (s EchoStats) String() string {
	str, _ := text.Marshal(0xed52e5bef76b7c45, capnp.Struct(s))
	return str
}

func (s EchoStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoStats) DecodeFromPtr(p capnp.Ptr) EchoStats {
	return EchoStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoStats) Latest() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoStats) HasLatest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoStats) LatestBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoStats) SetLatest(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EchoStats) Count() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s EchoStats) SetCount(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// EchoStats_List is a list of EchoStats.
type EchoStats_List = capnp.StructList[EchoStats]

// NewEchoStats creates a new list of EchoStats.
func NewEchoStats_List(s *capnp.Segment, sz int32) (EchoStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EchoStats](l), err
}

// EchoStats_Future is a wrapper for a EchoStats promised by a client call.
type EchoStats_Future struct{ *capnp.Future }

func (p EchoStats_Future) Struct() (EchoStats, error) {
	s, err := p.Future.Struct()
	return EchoStats(s), err
}

type EchoService capnp.Client

// EchoService_TypeID is the unique identifier for the type EchoService.
const EchoService_TypeID = 0xd52277af4a9defbf

func (c EchoService) Echo(ctx context.Context, params func(EchoService_echo_Params) error) (EchoService_echo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_echo_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_echo_Results_Future{Future: ans.Future()}, release
}
func (c EchoService) Latest(ctx context.Context, params func(EchoService_latest_Params) error) (EchoService_latest_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "latest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_latest_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_latest_Results_Future{Future: ans.Future()}, release
}
func (c EchoService) Stats(ctx context.Context, params func(EchoService_stats_Params) error) (EchoService_stats_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "stats",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoService_stats_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoService_stats_Results_Future{Future: ans.Future()}, release
}

func (c EchoService) AddRef() EchoService {
	return EchoService(capnp.Client(c).AddRef())
}

func (c EchoService) Release() {
	capnp.Client(c).Release()
}

func (c EchoService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EchoService) DecodeFromPtr(p capnp.Ptr) EchoService {
	return EchoService(capnp.Client{}.DecodeFromPtr(p))
}

func (c EchoService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A EchoService_Server is a EchoService with a local implementation.
type EchoService_Server interface {
	Echo(context.Context, EchoService_echo) error

	Latest(context.Context, EchoService_latest) error

	Stats(context.Context, EchoService_stats) error
}

// EchoService_NewServer creates a new Server from an implementation of EchoService_Server.
func EchoService_NewServer(s EchoService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EchoService_Methods(nil, s), s, c)
}

// EchoService_ServerToClient creates a new Client from an implementation of EchoService_Server.
// The caller is responsible for calling Release on the returned Client.
func EchoService_ServerToClient(s EchoService_Server) EchoService {
	return EchoService(capnp.NewClient(EchoService_NewServer(s)))
}

// EchoService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EchoService_Methods(methods []server.Method, s EchoService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Echo(ctx, EchoService_echo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      1,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "latest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Latest(ctx, EchoService_latest{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd52277af4a9defbf,
			MethodID:      2,
			InterfaceName: "echo.capnp:EchoService",
			MethodName:    "stats",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stats(ctx, EchoService_stats{call})
		},
	})

	return methods
}

// EchoService_echo holds the state for a server call to EchoService.echo.
// See server.Call for documentation.
type EchoService_echo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_echo) Args() EchoService_echo_Params {
	return EchoService_echo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_echo) AllocResults() (EchoService_echo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(r), err
}

// EchoService_latest holds the state for a server call to EchoService.latest.
// See server.Call for documentation.
type EchoService_latest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_latest) Args() EchoService_latest_Params {
	return EchoService_latest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_latest) AllocResults() (EchoService_latest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(r), err
}

// EchoService_stats holds the state for a server call to EchoService.stats.
// See server.Call for documentation.
type EchoService_stats struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoService_stats) Args() EchoService_stats_Params {
	return EchoService_stats_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoService_stats) AllocResults() (EchoService_stats_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(r), err
}

// EchoService_List is a list of EchoService.
type EchoService_List = capnp.CapList[EchoService]

// NewEchoService creates a new list of EchoService.
func NewEchoService_List(s *capnp.Segment, sz int32) (EchoService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EchoService](l), err
}

type EchoService_echo_Params capnp.Struct

// EchoService_echo_Params_TypeID is the unique identifier for the type EchoService_echo_Params.
const EchoService_echo_Params_TypeID = 0xe2bab90824c7835f

func NewEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func NewRootEchoService_echo_Params(s *capnp.Segment) (EchoService_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Params(st), err
}

func ReadRootEchoService_echo_Params(msg *capnp.Message) (EchoService_echo_Params, error) {
	root, err := msg.Root()
	return EchoService_echo_Params(root.Struct()), err
}

func (s EchoService_echo_Params) String() string {
	str, _ := text.Marshal(0xe2bab90824c7835f, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Params) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Params {
	return EchoService_echo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_echo_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_echo_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_echo_Params_List is a list of EchoService_echo_Params.
type EchoService_echo_Params_List = capnp.StructList[EchoService_echo_Params]

// NewEchoService_echo_Params creates a new list of EchoService_echo_Params.
func NewEchoService_echo_Params_List(s *capnp.Segment, sz int32) (EchoService_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Params](l), err
}

// EchoService_echo_Params_Future is a wrapper for a EchoService_echo_Params promised by a client call.
type EchoService_echo_Params_Future struct{ *capnp.Future }

func (p EchoService_echo_Params_Future) Struct() (EchoService_echo_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_echo_Params(s), err
}

type EchoService_echo_Results capnp.Struct

// EchoService_echo_Results_TypeID is the unique identifier for the type EchoService_echo_Results.
const EchoService_echo_Results_TypeID = 0xb84fbc6148a9c28d

func NewEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func NewRootEchoService_echo_Results(s *capnp.Segment) (EchoService_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_echo_Results(st), err
}

func ReadRootEchoService_echo_Results(msg *capnp.Message) (EchoService_echo_Results, error) {
	root, err := msg.Root()
	return EchoService_echo_Results(root.Struct()), err
}

func (s EchoService_echo_Results) String() string {
	str, _ := text.Marshal(0xb84fbc6148a9c28d, capnp.Struct(s))
	return str
}

func (s EchoService_echo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_echo_Results) DecodeFromPtr(p capnp.Ptr) EchoService_echo_Results {
	return EchoService_echo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_echo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_echo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_echo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_echo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_echo_Results) EchoText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_echo_Results) HasEchoText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_echo_Results) EchoTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_echo_Results) SetEchoText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_echo_Results_List is a list of EchoService_echo_Results.
type EchoService_echo_Results_List = capnp.StructList[EchoService_echo_Results]

// NewEchoService_echo_Results creates a new list of EchoService_echo_Results.
func NewEchoService_echo_Results_List(s *capnp.Segment, sz int32) (EchoService_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_echo_Results](l), err
}

// EchoService_echo_Results_Future is a wrapper for a EchoService_echo_Results promised by a client call.
type EchoService_echo_Results_Future struct{ *capnp.Future }

func (p EchoService_echo_Results_Future) Struct() (EchoService_echo_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_echo_Results(s), err
}

type EchoService_latest_Params capnp.Struct

// EchoService_latest_Params_TypeID is the unique identifier for the type EchoService_latest_Params.
const EchoService_latest_Params_TypeID = 0x8014ae8fc337c698

func NewEchoService_latest_Params(s *capnp.Segment) (EchoService_latest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_latest_Params(st), err
}

func NewRootEchoService_latest_Params(s *capnp.Segment) (EchoService_latest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_latest_Params(st), err
}

func ReadRootEchoService_latest_Params(msg *capnp.Message) (EchoService_latest_Params, error) {
	root, err := msg.Root()
	return EchoService_latest_Params(root.Struct()), err
}

func (s EchoService_latest_Params) String() string {
	str, _ := text.Marshal(0x8014ae8fc337c698, capnp.Struct(s))
	return str
}

func (s EchoService_latest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_latest_Params) DecodeFromPtr(p capnp.Ptr) EchoService_latest_Params {
	return EchoService_latest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_latest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_latest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_latest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_latest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EchoService_latest_Params_List is a list of EchoService_latest_Params.
type EchoService_latest_Params_List = capnp.StructList[EchoService_latest_Params]

// NewEchoService_latest_Params creates a new list of EchoService_latest_Params.
func NewEchoService_latest_Params_List(s *capnp.Segment, sz int32) (EchoService_latest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EchoService_latest_Params](l), err
}

// EchoService_latest_Params_Future is a wrapper for a EchoService_latest_Params promised by a client call.
type EchoService_latest_Params_Future struct{ *capnp.Future }

func (p EchoService_latest_Params_Future) Struct() (EchoService_latest_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_latest_Params(s), err
}

type EchoService_latest_Results capnp.Struct

// EchoService_latest_Results_TypeID is the unique identifier for the type EchoService_latest_Results.
const EchoService_latest_Results_TypeID = 0xa808aa9542253d6d

func NewEchoService_latest_Results(s *capnp.Segment) (EchoService_latest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(st), err
}

func NewRootEchoService_latest_Results(s *capnp.Segment) (EchoService_latest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_latest_Results(st), err
}

func ReadRootEchoService_latest_Results(msg *capnp.Message) (EchoService_latest_Results, error) {
	root, err := msg.Root()
	return EchoService_latest_Results(root.Struct()), err
}

func (s EchoService_latest_Results) String() string {
	str, _ := text.Marshal(0xa808aa9542253d6d, capnp.Struct(s))
	return str
}

func (s EchoService_latest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_latest_Results) DecodeFromPtr(p capnp.Ptr) EchoService_latest_Results {
	return EchoService_latest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_latest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_latest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_latest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_latest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_latest_Results) EchoText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EchoService_latest_Results) HasEchoText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_latest_Results) EchoTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EchoService_latest_Results) SetEchoText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EchoService_latest_Results_List is a list of EchoService_latest_Results.
type EchoService_latest_Results_List = capnp.StructList[EchoService_latest_Results]

// NewEchoService_latest_Results creates a new list of EchoService_latest_Results.
func NewEchoService_latest_Results_List(s *capnp.Segment, sz int32) (EchoService_latest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_latest_Results](l), err
}

// EchoService_latest_Results_Future is a wrapper for a EchoService_latest_Results promised by a client call.
type EchoService_latest_Results_Future struct{ *capnp.Future }

func (p EchoService_latest_Results_Future) Struct() (EchoService_latest_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_latest_Results(s), err
}

type EchoService_stats_Params capnp.Struct

// EchoService_stats_Params_TypeID is the unique identifier for the type EchoService_stats_Params.
const EchoService_stats_Params_TypeID = 0xcf6bbf9983d88b8e

func NewEchoService_stats_Params(s *capnp.Segment) (EchoService_stats_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_stats_Params(st), err
}

func NewRootEchoService_stats_Params(s *capnp.Segment) (EchoService_stats_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoService_stats_Params(st), err
}

func ReadRootEchoService_stats_Params(msg *capnp.Message) (EchoService_stats_Params, error) {
	root, err := msg.Root()
	return EchoService_stats_Params(root.Struct()), err
}

func (s EchoService_stats_Params) String() string {
	str, _ := text.Marshal(0xcf6bbf9983d88b8e, capnp.Struct(s))
	return str
}

func (s EchoService_stats_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_stats_Params) DecodeFromPtr(p capnp.Ptr) EchoService_stats_Params {
	return EchoService_stats_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_stats_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_stats_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_stats_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_stats_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EchoService_stats_Params_List is a list of EchoService_stats_Params.
type EchoService_stats_Params_List = capnp.StructList[EchoService_stats_Params]

// NewEchoService_stats_Params creates a new list of EchoService_stats_Params.
func NewEchoService_stats_Params_List(s *capnp.Segment, sz int32) (EchoService_stats_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EchoService_stats_Params](l), err
}

// EchoService_stats_Params_Future is a wrapper for a EchoService_stats_Params promised by a client call.
type EchoService_stats_Params_Future struct{ *capnp.Future }

func (p EchoService_stats_Params_Future) Struct() (EchoService_stats_Params, error) {
	s, err := p.Future.Struct()
	return EchoService_stats_Params(s), err
}

type EchoService_stats_Results capnp.Struct

// EchoService_stats_Results_TypeID is the unique identifier for the type EchoService_stats_Results.
const EchoService_stats_Results_TypeID = 0xda5279fc7be4434e

func NewEchoService_stats_Results(s *capnp.Segment) (EchoService_stats_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(st), err
}

func NewRootEchoService_stats_Results(s *capnp.Segment) (EchoService_stats_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoService_stats_Results(st), err
}

func ReadRootEchoService_stats_Results(msg *capnp.Message) (EchoService_stats_Results, error) {
	root, err := msg.Root()
	return EchoService_stats_Results(root.Struct()), err
}

func (s EchoService_stats_Results) String() string {
	str, _ := text.Marshal(0xda5279fc7be4434e, capnp.Struct(s))
	return str
}

func (s EchoService_stats_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoService_stats_Results) DecodeFromPtr(p capnp.Ptr) EchoService_stats_Results {
	return EchoService_stats_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoService_stats_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoService_stats_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoService_stats_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoService_stats_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoService_stats_Results) Stats() (EchoStats, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EchoStats(p.Struct()), err
}

func (s EchoService_stats_Results) HasStats() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoService_stats_Results) SetStats(v EchoStats) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStats sets the stats field to a newly
// allocated EchoStats struct, preferring placement in s's segment.
func (s EchoService_stats_Results) NewStats() (EchoStats, error) {
	ss, err := NewEchoStats(capnp.Struct(s).Segment())
	if err != nil {
		return EchoStats{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EchoService_stats_Results_List is a list of EchoService_stats_Results.
type EchoService_stats_Results_List = capnp.StructList[EchoService_stats_Results]

// NewEchoService_stats_Results creates a new list of EchoService_stats_Results.
func NewEchoService_stats_Results_List(s *capnp.Segment, sz int32) (EchoService_stats_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoService_stats_Results](l), err
}

// EchoService_stats_Results_Future is a wrapper for a EchoService_stats_Results promised by a client call.
type EchoService_stats_Results_Future struct{ *capnp.Future }

func (p EchoService_stats_Results_Future) Struct() (EchoService_stats_Results, error) {
	s, err := p.Future.Struct()
	return EchoService_stats_Results(s), err
}

func (p EchoService_stats_Results_Future) Stats() EchoStats_Future {
	return EchoStats_Future{Future: p.Future.Field(0, nil)}
}

type EchoBootstrap capnp.Client

// EchoBootstrap_TypeID is the unique identifier for the type EchoBootstrap.
const EchoBootstrap_TypeID = 0xafbd6666a784102e

func (c EchoBootstrap) GetEcho(ctx context.Context, params func(EchoBootstrap_getEcho_Params) error) (EchoBootstrap_getEcho_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xafbd6666a784102e,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoBootstrap",
			MethodName:    "getEcho",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EchoBootstrap_getEcho_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EchoBootstrap_getEcho_Results_Future{Future: ans.Future()}, release
}

func (c EchoBootstrap) AddRef() EchoBootstrap {
	return EchoBootstrap(capnp.Client(c).AddRef())
}

func (c EchoBootstrap) Release() {
	capnp.Client(c).Release()
}

func (c EchoBootstrap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EchoBootstrap) DecodeFromPtr(p capnp.Ptr) EchoBootstrap {
	return EchoBootstrap(capnp.Client{}.DecodeFromPtr(p))
}

func (c EchoBootstrap) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// A EchoBootstrap_Server is a EchoBootstrap with a local implementation.
type EchoBootstrap_Server interface {
	GetEcho(context.Context, EchoBootstrap_getEcho) error
}

// EchoBootstrap_NewServer creates a new Server from an implementation of EchoBootstrap_Server.
func EchoBootstrap_NewServer(s EchoBootstrap_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EchoBootstrap_Methods(nil, s), s, c)
}

// EchoBootstrap_ServerToClient creates a new Client from an implementation of EchoBootstrap_Server.
// The caller is responsible for calling Release on the returned Client.
func EchoBootstrap_ServerToClient(s EchoBootstrap_Server) EchoBootstrap {
	return EchoBootstrap(capnp.NewClient(EchoBootstrap_NewServer(s)))
}

// EchoBootstrap_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EchoBootstrap_Methods(methods []server.Method, s EchoBootstrap_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xafbd6666a784102e,
			MethodID:      0,
			InterfaceName: "echo.capnp:EchoBootstrap",
			MethodName:    "getEcho",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEcho(ctx, EchoBootstrap_getEcho{call})
		},
	})

	return methods
}

// EchoBootstrap_getEcho holds the state for a server call to EchoBootstrap.getEcho.
// See server.Call for documentation.
type EchoBootstrap_getEcho struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EchoBootstrap_getEcho) Args() EchoBootstrap_getEcho_Params {
	return EchoBootstrap_getEcho_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EchoBootstrap_getEcho) AllocResults() (EchoBootstrap_getEcho_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBootstrap_getEcho_Results(r), err
}

// EchoBootstrap_List is a list of EchoBootstrap.
type EchoBootstrap_List = capnp.CapList[EchoBootstrap]

// NewEchoBootstrap creates a new list of EchoBootstrap.
func NewEchoBootstrap_List(s *capnp.Segment, sz int32) (EchoBootstrap_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EchoBootstrap](l), err
}

type EchoBootstrap_getEcho_Params capnp.Struct

// EchoBootstrap_getEcho_Params_TypeID is the unique identifier for the type EchoBootstrap_getEcho_Params.
const EchoBootstrap_getEcho_Params_TypeID = 0xcfde8f221e3225b3

func NewEchoBootstrap_getEcho_Params(s *capnp.Segment) (EchoBootstrap_getEcho_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoBootstrap_getEcho_Params(st), err
}

func NewRootEchoBootstrap_getEcho_Params(s *capnp.Segment) (EchoBootstrap_getEcho_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EchoBootstrap_getEcho_Params(st), err
}

func ReadRootEchoBootstrap_getEcho_Params(msg *capnp.Message) (EchoBootstrap_getEcho_Params, error) {
	root, err := msg.Root()
	return EchoBootstrap_getEcho_Params(root.Struct()), err
}

func (s EchoBootstrap_getEcho_Params) String() string {
	str, _ := text.Marshal(0xcfde8f221e3225b3, capnp.Struct(s))
	return str
}

func (s EchoBootstrap_getEcho_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoBootstrap_getEcho_Params) DecodeFromPtr(p capnp.Ptr) EchoBootstrap_getEcho_Params {
	return EchoBootstrap_getEcho_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoBootstrap_getEcho_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoBootstrap_getEcho_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoBootstrap_getEcho_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoBootstrap_getEcho_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EchoBootstrap_getEcho_Params_List is a list of EchoBootstrap_getEcho_Params.
type EchoBootstrap_getEcho_Params_List = capnp.StructList[EchoBootstrap_getEcho_Params]

// NewEchoBootstrap_getEcho_Params creates a new list of EchoBootstrap_getEcho_Params.
func NewEchoBootstrap_getEcho_Params_List(s *capnp.Segment, sz int32) (EchoBootstrap_getEcho_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EchoBootstrap_getEcho_Params](l), err
}

// EchoBootstrap_getEcho_Params_Future is a wrapper for a EchoBootstrap_getEcho_Params promised by a client call.
type EchoBootstrap_getEcho_Params_Future struct{ *capnp.Future }

func (p EchoBootstrap_getEcho_Params_Future) Struct() (EchoBootstrap_getEcho_Params, error) {
	s, err := p.Future.Struct()
	return EchoBootstrap_getEcho_Params(s), err
}

type EchoBootstrap_getEcho_Results capnp.Struct

// EchoBootstrap_getEcho_Results_TypeID is the unique identifier for the type EchoBootstrap_getEcho_Results.
const EchoBootstrap_getEcho_Results_TypeID = 0xf0417b79c793c63a

func NewEchoBootstrap_getEcho_Results(s *capnp.Segment) (EchoBootstrap_getEcho_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBootstrap_getEcho_Results(st), err
}

func NewRootEchoBootstrap_getEcho_Results(s *capnp.Segment) (EchoBootstrap_getEcho_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBootstrap_getEcho_Results(st), err
}

func ReadRootEchoBootstrap_getEcho_Results(msg *capnp.Message) (EchoBootstrap_getEcho_Results, error) {
	root, err := msg.Root()
	return EchoBootstrap_getEcho_Results(root.Struct()), err
}

func (s EchoBootstrap_getEcho_Results) String() string {
	str, _ := text.Marshal(0xf0417b79c793c63a, capnp.Struct(s))
	return str
}

func (s EchoBootstrap_getEcho_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EchoBootstrap_getEcho_Results) DecodeFromPtr(p capnp.Ptr) EchoBootstrap_getEcho_Results {
	return EchoBootstrap_getEcho_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EchoBootstrap_getEcho_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EchoBootstrap_getEcho_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EchoBootstrap_getEcho_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EchoBootstrap_getEcho_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EchoBootstrap_getEcho_Results) Service() EchoService {
	p, _ := capnp.Struct(s).Ptr(0)
	return EchoService(p.Interface().Client())
}

func (s EchoBootstrap_getEcho_Results) HasService() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EchoBootstrap_getEcho_Results) SetService(v EchoService) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// EchoBootstrap_getEcho_Results_List is a list of EchoBootstrap_getEcho_Results.
type EchoBootstrap_getEcho_Results_List = capnp.StructList[EchoBootstrap_getEcho_Results]

// NewEchoBootstrap_getEcho_Results creates a new list of EchoBootstrap_getEcho_Results.
func NewEchoBootstrap_getEcho_Results_List(s *capnp.Segment, sz int32) (EchoBootstrap_getEcho_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EchoBootstrap_getEcho_Results](l), err
}

// EchoBootstrap_getEcho_Results_Future is a wrapper for a EchoBootstrap_getEcho_Results promised by a client call.
type EchoBootstrap_getEcho_Results_Future struct{ *capnp.Future }

func (p EchoBootstrap_getEcho_Results_Future) Struct() (EchoBootstrap_getEcho_Results, error) {
	s, err := p.Future.Struct()
	return EchoBootstrap_getEcho_Results(s), err
}

func (p EchoBootstrap_getEcho_Results_Future) Service() EchoService {
	return EchoService(p.Future.Field(0, nil).Client())
}

const schema_cd6ed2180540008c = "x\xda\x9c\x93OH\x14o\x18\xc7\x9f\xe7}g\x9d\xf9" +
	"\xe1\xca\xfa2\xfe\xc8:$\xca\x0a\xb5\xe0\xa6[\x10." +
	"\xc5n\x1bRx\xa8\x9d\xadK\x87\x88a\x193t]" +
	"\xd9\xf75\x15+\x03\xbb\xf5G\"\x82<x\x8cR(" +
	"\x89.)\x99T\xa4\x10\x84\x10\x08\xd1\xa1C\xd41\xea" +
	"\xd6\xa5\x98xg\xf6\xdd\x9d6L\xe86\xcc\xf3\xbc\x9f" +
	"\xef\xf7\xf9\xd7y\x09\xd3ZW\xc3\x9e\x10\x10\xeb@\xa8" +
	"\xce\xbd\xb3\xba\xff\xe5\xf4\xc3\xa6\xcb\xc0\xb6!\x80\xa6\x03" +
	"\xec\xbdHb\x08\x9a[8\xd8\x9e\xb9=o\xdc\xf7#" +
	"!\x94!\x87$\x10\xd0,\x90\x14\xa0\x1bo\xbcr\xaf" +
	"\xafoy\x01X=\xfdy-\x1dj~;\xf4\x06\xd0" +
	"\xbcI^\x9b\xb3D\x070g\xc8\x11\xf3\xb9\xfcr\xaf" +
	"\xbf\x98;j?=\xfe$\xc8\x9a#m\x92\xf5\xc8c" +
	"\xdd\xb8\xfanjfe`=`cC\xc65\xf7q" +
	"{bg\xdb\xf4\x87u`\xdbUd\x99ddd\xe5" +
	"\xebl\xef\xc2h\xdbF\x8d\xfe]\xb2d>\xf0\xf4\xe7" +
	"\xc8\x9a\xd9J\xa5\xfe\xb1\xc3\x9f&~\x8c\xe7\xde\x07\xf5" +
	"\xff\xa31\xa9\xcf\xa8\xd4?3\xb5\x165\x16\x97>\x06" +
	"\x13\xba\xe8\x0e\x99\xd0\xed%\xf4\\\x18\xf8\xfe\xecs\xee" +
	"\x0bX\xf5\x88J\xcd\xcb3O\xd1y\xd3\x962\xe6i" +
	":\x0a\xe8&Wo\xad\x8dO\x1c\xfa\xe6;\xf6Y\x8b" +
	"\xb4W\xb2^\xd1\x14t\xb8N\xbe\xbf\x18\xcf\xdb\xc3t" +
	"h8\xd9\x93\xef/\x9epJ\xe7\xcf\xe5\x9d\xf8\xa0-" +
	"\x1c.\xa2Y;R\xb2\x0b|\xab\xb4\x9c\xd3\xc2G\x06" +
	"\x05\xb74\xaa\x01h\x08\xc0\x1az\x01\xac0E\xab\x99" +
	"\xa0\xf7\xfc\xa43&\x00\x00\xc3@0\x0cXA\x922" +
	"2S,\x0a.J\xf60@\x16\xd1\xd2h\x08\xa0\xd2" +
	"qT\x850\x96\x01\xc2B\xfa\xe4YG\xc8Wi\xcc" +
	"\"njO\xfe\x8f\xe6\x1c>\xa2\xff\xa3\xb9Z \x17" +
	"\xb6\xe0\xd1\xac]\xd2\x83]\xa9\xab-!^v'3" +
	"\xed\x02\x07\x95\xa8h)\x1f'\xeb\x0c{u\xaa\x99\xa3" +
	"\xdaNf\xc5\x80\xb0\x1e\x1d\xb1r\x16\xa8\xae\x80u'" +
	"\x81\xb0\x0e\x1dIeWQm\x15kM\x00a\xff\xeb" +
	"\x11\xc7kN\xca\x1fP\x1a[<\xe7\x7f\xef\x96_\\" +
	"\xce\xe1\x91\xdaY&\x00,\x83\xa2\xd5D\xca l\xac" +
	"n! 6\xc2\x163\x90}\xa0\x85\xdf\x98\xb1*3" +
	"\"\x9c1\xf1G\xefQ\x81\"RQ\xf6\xca\xa8\xbc\xde" +
	"\x9d\x04\xb0\xa2\x14\xadN\x82\x88M(\xffuH\x97\xbb" +
	"(Z\xfb\x88\xaa[1[\xf2\xc5\x91!\x81\x06\x104" +
	"\x02\x0a\xda\xa6s\x93;3(8@\xd0q\xa6\xeax" +
	"\x92\xfb\xd5!\xab\x9e> 2\xc0_\x01\x00\x00\xff\xff" +
	"\x15CU3"

func init() {
	schemas.Register(schema_cd6ed2180540008c,
		0x8014ae8fc337c698,
		0xa808aa9542253d6d,
		0xafbd6666a784102e,
		0xb84fbc6148a9c28d,
		0xcf6bbf9983d88b8e,
		0xcfde8f221e3225b3,
		0xd52277af4a9defbf,
		0xda5279fc7be4434e,
		0xe2bab90824c7835f,
		0xed52e5bef76b7c45,
		0xf0417b79c793c63a)
}
